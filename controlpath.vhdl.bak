library IEEE;  
use IEEE.std_logic_1164.all; 
 
entity controlpath is  
  port (z,c,pe_v,comparator : in std_logic;
	clk : in std_logic;
	IRVal : in std_logic_vector(15 downto 0);
	M1,M4,M5,M10,M11,M12,M13 : out std_logic_vector(1 downto 0);  
        M2,M3,M6,M7,M8,M9,M14,PCWr,PCTempWr,MemWr,IREn,T1En,T2En,T3En,T4En,RegWr,CEn,ZEn,Alu_op : out std_logic);  
end entity;
  
architecture behaviour of controlpath is 
  type state_type is (s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15);  
  signal state: state_type;
  
begin  
  process (clk)
  
  begin  
    if (clk='1' and clk'event) then
	PCWr <= "0";
	PCTempWr <= "0";
	MemWr <= "0";
	IREn <= "0";
	T1En <= "0";
	T2En <= "0";
	T3En <= "0";
	T4En <= "0";
	RegWr <= "0";
	CEn <= "0";
	ZEn <= "0"; 
 
      case state is  
        when s1 =>
		if (IRVal(15 downto 12) /= "1111") then 
			state <= s2;
			M1 <= "01";
			M11 <= "01";
			M12 <= "00";
			M13 <= "00";
			M14 <= "0";
			PCTempWr <= "1";
			IREn <= "1";
			T3En <= "1";
		end if;
  
        when s2 =>
		M3 <= "1";
		M6 <= "0";
		M7 <= "1";
		M8 <= "1";
		M9 <= "0";
		T1En <= "1";
		T2En <= "1";
		if (IRVal(15 downto 12) = "0011") then 
			state <= s3;
			M10 <= "00";
			T4En <= "1"; 
		elsif (IRVal(15 downto 12) = "0000") then
			if (IRVal(1 downto 0) = "00") then
				state <= s4;
			elsif (IRVal(1 downto 0) = "01") then
				if (z="1") then
					state <= s4;
				else then
					state <= s15;
				end if;
			elsif (IRVal(1 downto 0) = "10") then
				if (c="1") then
					state <= s4;
				else then
					state <= s15;
				end if;
			end if;
		elsif (IRVal(15 downto 12) = "0010") then
			if (IRVal(1 downto 0) = "00") then
				state <= s4;
			elsif (IRVal(1 downto 0) = "01") then
				if (z="1") then
					state <= s4;
				else then
					state <= s15;
				end if;
			elsif (IRVal(1 downto 0) = "10") then
				if (c="1") then
					state <= s4;
				else then
					state <= s15;
				end if;
			end if;
		elsif ((IRVal(15 downto 12) = "0001") or (IRVal(15 downto 12) = "0100") or (IRVal(15 downto 12) = "0101")) then
			M10 <= "01";
			T4En <= "1";
		elsif (IRVal(15 downto 12) = "0110") then 
			state <= s7;
			M10 <= "00";
			T4En <= "1";
		elsif (IRVal(15 downto 12) = "0111") then 
			state <= s9;
			M10 <= "00";
			T4En <= "1";
		elsif (IRVal(15 downto 12) = "1100") then state <= s11;
		elsif (IRVal(15 downto 12) = "1000") then state <= s13;
		elsif (IRVal(15 downto 12) = "1001") then state <= s14;
		end if;
 
        when s3 => 
		state <= s1;
		M7 <= "0";
		M8 <= "0";
		PCWr <= "1";
		RegWr <= "1";
		if ((IRVal(15 downto 12) = "0000") or (IRVal(15 downto 12) = "0010")) then
			M4 <= "01";
			M5 <= "01";
			ZEn <= "1";
		elsif (IRVal(15 downto 12) = "0011") then
			M4 <= "00";
			M5 <= "10";
		elsif ((IRVal(15 downto 12) = "0001") or (IRVal(15 downto 12) = "0100")) then
			M4 <= "11";
			M5 <= "01";
			ZEn <= "1";
		end if;
 
        when s4 =>
		M11 <= "10";
		M12 <= "01";
		T3En <= "1";  
		if ((IRVal(15 downto 12) = "0000") or (IRVal(15 downto 12) = "0001")) then 
			state <= s3;
			M13 <= "01";
			CEn <= "1";
			Alu_op <= "0";
		elsif (IRVal(15 downto 12) = "0010") then
			state <= s3;
			M13 <= "01";
			CEn <= "1";
			Alu_op <= "1";
		elsif (IRVal(15 downto 12) = "0100") then 
			state <= s5;
			M13 <= "10";
			Alu_op <= "0";
		elsif (IRVal(15 downto 12) = "0101") then 
			state <= s6;
			M13 <= "10";
			Alu_op <= "0";
		end if;

	when s5 => 
		state <= s3;
		M1 <= "11";
		M11 <= "00";
		T3En <= "1";

	when s6 => 
		state <= s15;
		M1 <= "11";
		M2 <= "1";
		MemWr <= "1";

	when s7 =>
		M1 <= "10";
		M9 <= "1";
		M11 <= "00";
		M12 <= "10";
		M13 <= "00";
		PCWr <= "1";
		T2En <= "1";
		T3En <= "1";
		if (pe_v = "1") then state <= s8;
		else then state <= s1;
		end if;

	when s8 =>
		state <= s7;
		M4 <= "10";
		M5 <= "01";
		M10 <= "10";
		T4En <= "1";
		RegWr <= "1"; 

	when s9 =>
		M3 <= "1";
		M11 = "11";
		T3En <= "1";
		if (pe_v = "1") then state <= s10;
		else  then state <= s15;
		end if;

	when s10 =>
		state <= s9;
		M1 <= "10";
		M2 <= "0";
		M9 <= "1";
		M10 <= "10";
		M12 <= "10";
		M13 <= "00";
		MemWr <= "1";
		T2En <= "1";
		T4En <= "1"; 

	when s11 =>
		M7 <= "1";
		M8 <= "1";
		if (comp_out='0') then state <= s15;
		else then state <= s12;
		end if;

	when s12 => 
		state <= s15;
		M6 <= "1";
		M12 <= "11";
		M13 <= "11";
		M14 <= "0";
		PCTempWr <= "1";

	when s13 => 
		state <= s15;
		M4 <= "00";
		M5 <= "00";
		M6 <= "0";
		M12 <= "11";
		M13 <= "11";
		M14 <= "0";
		PCTempWr <= "1";
		RegWr <= "1";

	when s14 => 
		state <= s15;
		M3 <= "0";
		M4 <= "00";
		M5 <= "00";
		M14 <= "1";
		PCTempWr <= "1";
		RegWr <= "1";

	when s15 => 
		state <= s1;
		PCWr <= "1";
 
      end case;  
    end if;
  
  end process;  
end behaviour;
