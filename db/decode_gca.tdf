--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV GX" LPM_DECODES=9 LPM_WIDTH=4 data eq
--VERSION_BEGIN 15.1 cbx_cycloneii 2015:10:14:18:59:15:SJ cbx_lpm_add_sub 2015:10:14:18:59:15:SJ cbx_lpm_compare 2015:10:14:18:59:15:SJ cbx_lpm_decode 2015:10:14:18:59:15:SJ cbx_mgl 2015:10:21:19:02:34:SJ cbx_nadder 2015:10:14:18:59:15:SJ cbx_stratix 2015:10:14:18:59:15:SJ cbx_stratixii 2015:10:14:18:59:15:SJ  VERSION_END


-- Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus Prime License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 16 
SUBDESIGN decode_gca
( 
	data[3..0]	:	input;
	eq[8..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[8..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode1117w[3..0]	: WIRE;
	w_anode1134w[3..0]	: WIRE;
	w_anode1144w[3..0]	: WIRE;
	w_anode1154w[3..0]	: WIRE;
	w_anode1164w[3..0]	: WIRE;
	w_anode1174w[3..0]	: WIRE;
	w_anode1184w[3..0]	: WIRE;
	w_anode1194w[3..0]	: WIRE;
	w_anode1204w[3..0]	: WIRE;
	w_anode1215w[3..0]	: WIRE;
	w_anode1225w[3..0]	: WIRE;
	w_anode1235w[3..0]	: WIRE;
	w_anode1245w[3..0]	: WIRE;
	w_anode1255w[3..0]	: WIRE;
	w_anode1265w[3..0]	: WIRE;
	w_anode1275w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[0..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode1194w[3..3], w_anode1184w[3..3], w_anode1174w[3..3], w_anode1164w[3..3], w_anode1154w[3..3], w_anode1144w[3..3], w_anode1134w[3..3], w_anode1117w[3..3]);
	eq_wire2w[] = ( w_anode1275w[3..3], w_anode1265w[3..3], w_anode1255w[3..3], w_anode1245w[3..3], w_anode1235w[3..3], w_anode1225w[3..3], w_anode1215w[3..3], w_anode1204w[3..3]);
	w_anode1117w[] = ( (w_anode1117w[2..2] & (! data_wire[2..2])), (w_anode1117w[1..1] & (! data_wire[1..1])), (w_anode1117w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1134w[] = ( (w_anode1134w[2..2] & (! data_wire[2..2])), (w_anode1134w[1..1] & (! data_wire[1..1])), (w_anode1134w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1144w[] = ( (w_anode1144w[2..2] & (! data_wire[2..2])), (w_anode1144w[1..1] & data_wire[1..1]), (w_anode1144w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1154w[] = ( (w_anode1154w[2..2] & (! data_wire[2..2])), (w_anode1154w[1..1] & data_wire[1..1]), (w_anode1154w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1164w[] = ( (w_anode1164w[2..2] & data_wire[2..2]), (w_anode1164w[1..1] & (! data_wire[1..1])), (w_anode1164w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1174w[] = ( (w_anode1174w[2..2] & data_wire[2..2]), (w_anode1174w[1..1] & (! data_wire[1..1])), (w_anode1174w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1184w[] = ( (w_anode1184w[2..2] & data_wire[2..2]), (w_anode1184w[1..1] & data_wire[1..1]), (w_anode1184w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1194w[] = ( (w_anode1194w[2..2] & data_wire[2..2]), (w_anode1194w[1..1] & data_wire[1..1]), (w_anode1194w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1204w[] = ( (w_anode1204w[2..2] & (! data_wire[2..2])), (w_anode1204w[1..1] & (! data_wire[1..1])), (w_anode1204w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1215w[] = ( (w_anode1215w[2..2] & (! data_wire[2..2])), (w_anode1215w[1..1] & (! data_wire[1..1])), (w_anode1215w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1225w[] = ( (w_anode1225w[2..2] & (! data_wire[2..2])), (w_anode1225w[1..1] & data_wire[1..1]), (w_anode1225w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1235w[] = ( (w_anode1235w[2..2] & (! data_wire[2..2])), (w_anode1235w[1..1] & data_wire[1..1]), (w_anode1235w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1245w[] = ( (w_anode1245w[2..2] & data_wire[2..2]), (w_anode1245w[1..1] & (! data_wire[1..1])), (w_anode1245w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1255w[] = ( (w_anode1255w[2..2] & data_wire[2..2]), (w_anode1255w[1..1] & (! data_wire[1..1])), (w_anode1255w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1265w[] = ( (w_anode1265w[2..2] & data_wire[2..2]), (w_anode1265w[1..1] & data_wire[1..1]), (w_anode1265w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1275w[] = ( (w_anode1275w[2..2] & data_wire[2..2]), (w_anode1275w[1..1] & data_wire[1..1]), (w_anode1275w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
